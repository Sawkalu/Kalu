//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use 'sass:color';
@use 'sass:map';
@use '@material/theme/color-palette';
@use '@material/shape/shape';
@use '@material/theme/state';
@use '@material/theme/theme-color';
@use '../../sass/resolvers';
@use '../../sass/theme';
@use '../../sass/var';
@use './content-theme';
@use './field-theme';
@use './label-theme';

$_selectors: field-theme.$selectors;

$_error-state-content: color.scale(theme-color.$error, $blackness: 25%);

$_base-light-theme: map.merge(
  field-theme.$light-theme,
  content-theme.$light-theme
);
$_base-light-theme: map.merge($_base-light-theme, label-theme.$light-theme);

$light-theme: map.merge(
  $_base-light-theme,
  (
    container-color: color-palette.$grey-100,
    container-padding-vertical: 8px,
    disabled-container-color: color-palette.$grey-400,
    disabled-container-opacity: 0.04,
    disabled-active-indicator-color: color-palette.$grey-700,
    disabled-active-indicator-opacity: 0.38,
    error-hover-active-indicator-color: $_error-state-content,
    error-active-indicator-color: theme-color.$error,
    focus-active-indicator-color: theme-color.$primary,
    focus-active-indicator-width: 2px,
    hover-state-layer-color: color-palette.$grey-800,
    hover-state-layer-opacity: 0.08,
    hover-active-indicator-color: color-palette.$grey-900,
    shape: shape.$small-component-radius,
    active-indicator-color: color-palette.$grey-700,
    active-indicator-width: 1px,
  )
);

@function _resolve-theme($theme, $resolvers) {
  @return label-theme.resolve-theme($theme, $resolvers);
}

@mixin theme($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme($light-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, filled-field);

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($light-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, filled-field);

  @include field-theme.theme-styles($theme);
  @include content-theme.theme-styles($theme);
  @include label-theme.theme-styles($theme);

  @include _active-indicator-color(
    (
      default: map.get($theme, active-indicator-color),
      disabled: map.get($theme, disabled-active-indicator-color),
      focus: map.get($theme, focus-active-indicator-color),
      hover: map.get($theme, hover-active-indicator-color),
    )
  );
  @include _active-indicator-error-color(
    (
      default: map.get($theme, error-active-indicator-color),
      focus: map.get($theme, error-active-indicator-color),
      hover: map.get($theme, error-hover-active-indicator-color),
    )
  );
  @include _active-indicator-opacity(
    (
      disabled: map.get($theme, disabled-active-indicator-opacity),
    )
  );
  @include _active-indicator-width(
    (
      default: map.get($theme, active-indicator-width),
      focus: map.get($theme, focus-active-indicator-width),
    )
  );
  @include _container-color(
    (
      default: map.get($theme, container-color),
      disabled: map.get($theme, disabled-container-color),
      hover: map.get($theme, hover-state-layer-color),
    )
  );
  @include _container-opacity(
    (
      disabled: map.get($theme, disabled-container-opacity),
      hover: map.get($theme, hover-state-layer-opacity),
    )
  );
  @include _container-padding-horizontal(
    map.get($theme, container-padding-horizontal)
  );
  @include _container-padding-vertical(
    map.get($theme, container-padding-vertical)
  );
  @include _floating-label-text-line-height(
    map.get($theme, floating-label-text-line-height)
  );
  @include _shape(map.get($theme, shape));
}

@mixin _active-indicator-color($colors) {
  @include state.independent-elements(focus) {
    @include state.enabled($_selectors) {
      @include _set-active-indicator-color(state.get-default-state($colors));
    }

    // Focus is on a separate element and does not need a focus selector
    @include _set-active-indicator-focus-color(state.get-focus-state($colors));

    @include state.hover($_selectors) {
      @include _set-active-indicator-color(state.get-hover-state($colors));
    }

    @include state.disabled($_selectors) {
      @include _set-active-indicator-color(state.get-disabled-state($colors));
    }
  }
}

@mixin _set-active-indicator-color($color) {
  .mdc-field__active-indicator::before {
    border-bottom-color: $color;
  }
}

@mixin _set-active-indicator-focus-color($color) {
  .mdc-field__active-indicator::after {
    border-bottom-color: $color;
  }
}

@mixin _active-indicator-error-color($colors) {
  @include state.error($_selectors) {
    @include _active-indicator-color($colors);
  }
}

@mixin _active-indicator-opacity($opacities) {
  @include state.enabled($_selectors) {
    @include _set-active-indicator-opacity(state.get-default-state($opacities));
  }

  @include state.disabled($_selectors) {
    @include _set-active-indicator-opacity(
      state.get-disabled-state($opacities)
    );
  }
}

@mixin _set-active-indicator-opacity($opacity) {
  .mdc-field__active-indicator::before {
    opacity: $opacity;
  }
}

@mixin _active-indicator-width($widths) {
  .mdc-field__active-indicator {
    // Default/focus are on different elements and do not need state selectors
    &::before {
      border-bottom-width: state.get-default-state($widths);
    }

    &::after {
      border-bottom-width: state.get-focus-state($widths);
    }
  }
}

@mixin _container-color($colors) {
  @include state.enabled($_selectors) {
    @include _set-container-color(state.get-default-state($colors));
  }

  // Hover is on a separate element and does not need a hover selector
  @include _set-container-hover-color(state.get-hover-state($colors));

  @include state.disabled($_selectors) {
    @include _set-container-color(state.get-disabled-state($colors));
  }
}

@mixin _set-container-color($color) {
  .mdc-field__container {
    &::before {
      background: $color;
    }
  }
}

@mixin _set-container-hover-color($color) {
  .mdc-field__container {
    &::after {
      background: $color;
    }
  }
}

@mixin _container-opacity($opacities) {
  @include state.enabled($_selectors) {
    @include _set-container-opacity(state.get-default-state($opacities));
  }

  // Hover is on a separate element and does not need a hover selector
  @include _set-container-hover-opacity(state.get-hover-state($opacities));

  @include state.disabled($_selectors) {
    @include _set-container-opacity(state.get-disabled-state($opacities));
  }
}

@mixin _set-container-opacity($opacity) {
  .mdc-field__container {
    &::before {
      opacity: $opacity;
    }
  }
}

@mixin _set-container-hover-opacity($opacity) {
  .mdc-field__container {
    &::after {
      opacity: $opacity;
    }
  }
}

@mixin _container-padding-horizontal($padding) {
  .mdc-field__start {
    padding-inline-start: $padding;
  }

  .mdc-field__end {
    padding-inline-end: $padding;
  }
}

@mixin _container-padding-vertical($padding) {
  .mdc-field__container {
    padding-top: $padding;
    padding-bottom: $padding;
  }
}

@mixin _floating-label-text-line-height($line-height) {
  &:not(.mdc-field--no-label) {
    .mdc-field__middle {
      padding-top: $line-height;
    }
  }
}

@mixin _shape($shape) {
  .mdc-field__container {
    border-start-start-radius: $shape;
    border-start-end-radius: $shape;
  }
}
