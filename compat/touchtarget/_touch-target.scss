//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:math';

$height: 48px !default;
$width: $height !default;

/// Styles applied to the component's inner touch target element.
/// By default, only sets the inner element height to the minimum touch target
/// height ($mdc-touch-target-height).
/// @param {Boolean} $set-width [false] - Sets the inner element width to the
///     minimum touch target width ($mdc-touch-target-width).
/// @param $height [$mdc-touch-target-height] - Touch target height.
/// @param $width [$mdc-touch-target-width] - Touch target width.
@mixin touch-target($set-width: false, $height: $height, $width: $width) {
  position: absolute;
  top: 50%;
  height: $height;
  @if $set-width {
    /* @noflip */ /*rtl:ignore*/
    left: 50%;
    width: $width;
    transform: translate(-50%, -50%);
  } @else {
    left: 0;
    right: 0;
    transform: translateY(-50%);
  }
}

/// Applies margin to the component with the increased touch target,
/// to compensate for the touch target.
@mixin margin(
  $component-height,
  $component-width: null,
  $touch-target-height: $height,
  $touch-target-width: $width
) {
  $vertical-margin-value: math.div($touch-target-height - $component-height, 2);

  margin-top: $vertical-margin-value;
  margin-bottom: $vertical-margin-value;

  @if $component-width {
    $horizontal-margin-value: math.div(
      $touch-target-width - $component-width,
      2
    );

    margin-right: $horizontal-margin-value;
    margin-left: $horizontal-margin-value;
  }
}
